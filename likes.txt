    this.socket.on('likes', async (response) => {
      try {
        for (const client of response) {
          await this.page.goto(client.link, {
            waitUntil: 'load',
            timeout: 0,
          });
          await this.page.waitForSelector('html');
          await this.page.$eval('html', (el) => {
            el.querySelector('body').style.zoom = 0.7;
          });
          await this.page.waitForTimeout(4000);
          if (
            (await this.page.$(
              'footer.profile-creator-shared-content-view__footer-actions',
            )) !== null
          ) {
            const have_posts = await this.page.$eval(
              'footer.profile-creator-shared-content-view__footer-actions',
              (el) => el.innerText,
            );

            if (have_posts === 'Show all posts') {
              const show_posts = await this.page.$(
                'footer.profile-creator-shared-content-view__footer-actions > a',
              );
              await show_posts.evaluate((b) => b.click());
              await this.page.waitForNavigation({ timeout: 0 });

              await this.page.waitForTimeout(5000);

              if (
                (await this.page.$('button.react-button__trigger')) !== null
              ) {
                const like_buttons = await this.page.$$(
                  'button.react-button__trigger',
                );
                for (let item = 0; item < client.count_like; item++) {
                  await like_buttons[item].evaluate((b) => b.click());
                  await this.page.waitForTimeout(4000);
                  if (client.comments.length > 0) {
                    const comment_button = await this.page.$$(
                      '.comment-button',
                    );
                    await comment_button[item].evaluate((b) => b.click());
                    await this.page.waitForTimeout(5000);

                    const comment = client.comments[item];
                    this.page.evaluate((text) => {
                      const newtext = document.createTextNode(text);
                      document
                        .querySelector('.ql-editor > p')
                        .appendChild(newtext);
                    }, comment);

                    await this.page.waitForTimeout(2000);
                    const post_button = await this.page.$(
                      'button.comments-comment-box__submit-button',
                    );
                    await post_button.evaluate((b) => b.click());
                    await this.page.waitForTimeout(2000);
                    await this.page.$eval(
                      'form.comments-comment-box__form',
                      (el) => el.remove(),
                    );
                    await this.page.waitForTimeout(4000);
                  }
                }
              }
            }
          }
        }
        const answer = response.map((el) => el.link);

        this.socket.emit('likes', {
          data: answer,
          email: this.email,
        });
      } catch (error) {
        console.log(error);
        axios.default.post('http://bot.midera.fun:8000/server/errors', {
          error,
          email: this.email,
        });
      }
    });